{
  "name": "p-retry",
  "version": "4.6.2",
  "description": "Retry a promise-returning or async function",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/p-retry.git"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "engines": {
    "node": ">=8"
  },
  "scripts": {
    "test": "xo && ava && tsd"
  },
  "keywords": [
    "promise",
    "retry",
    "retries",
    "operation",
    "failed",
    "rejected",
    "try",
    "exponential",
    "backoff",
    "attempt",
    "async",
    "await",
    "promises",
    "concurrently",
    "concurrency",
    "parallel",
    "bluebird"
  ],
  "dependencies": {
    "@types/retry": "0.12.0",
    "retry": "^0.13.1"
  },
  "devDependencies": {
    "ava": "^2.4.0",
    "delay": "^4.1.0",
    "tsd": "^0.10.0",
    "xo": "^0.25.3"
  },
  "types": "./index.d.ts",
  "readme": "# p-retry\n\n> Retry a promise-returning or async function\n\nIt does exponential backoff and supports custom retry strategies for failed operations.\n\n## Install\n\n```\n$ npm install p-retry\n```\n\n## Usage\n\n```js\nconst pRetry = require('p-retry');\nconst fetch = require('node-fetch');\n\nconst run = async () => {\n\tconst response = await fetch('https://sindresorhus.com/unicorn');\n\n\t// Abort retrying if the resource doesn't exist\n\tif (response.status === 404) {\n\t\tthrow new pRetry.AbortError(response.statusText);\n\t}\n\n\treturn response.blob();\n};\n\n(async () => {\n\tconsole.log(await pRetry(run, {retries: 5}));\n})();\n```\n\n## API\n\n### pRetry(input, options?)\n\nReturns a `Promise` that is fulfilled when calling `input` returns a fulfilled promise. If calling `input` returns a rejected promise, `input` is called again until the maximum number of retries is reached. It then rejects with the last rejection reason.\n\n\nDoes not retry on most `TypeErrors`, with the exception of network errors. This is done on a best case basis as different browsers have different [messages](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful) to indicate this. See [whatwg/fetch#526 (comment)](https://github.com/whatwg/fetch/issues/526#issuecomment-554604080)\n\n\n#### input\n\nType: `Function`\n\nReceives the current attempt number as the first argument and is expected to return a `Promise` or any value.\n\n#### options\n\nType: `object`\n\nOptions are passed to the [`retry`](https://github.com/tim-kos/node-retry#retryoperationoptions) module.\n\n##### onFailedAttempt(error)\n\nType: `Function`\n\nCallback invoked on each retry. Receives the error thrown by `input` as the first argument with properties `attemptNumber` and `retriesLeft` which indicate the current attempt number and the number of attempts left, respectively.\n\n```js\nconst run = async () => {\n\tconst response = await fetch('https://sindresorhus.com/unicorn');\n\n\tif (!response.ok) {\n\t\tthrow new Error(response.statusText);\n\t}\n\n\treturn response.json();\n};\n\n(async () => {\n\tconst result = await pRetry(run, {\n\t\tonFailedAttempt: error => {\n\t\t\tconsole.log(`Attempt ${error.attemptNumber} failed. There are ${error.retriesLeft} retries left.`);\n\t\t\t// 1st request => Attempt 1 failed. There are 4 retries left.\n\t\t\t// 2nd request => Attempt 2 failed. There are 3 retries left.\n\t\t\t// â€¦\n\t\t},\n\t\tretries: 5\n\t});\n\n\tconsole.log(result);\n})();\n```\n\nThe `onFailedAttempt` function can return a promise. For example, you can do some async logging:\n\n```js\nconst pRetry = require('p-retry');\nconst logger = require('./some-logger');\n\nconst run = async () => { â€¦ };\n\n(async () => {\n\tconst result = await pRetry(run, {\n\t\tonFailedAttempt: async error => {\n\t\t\tawait logger.log(error);\n\t\t}\n\t});\n})();\n```\n\nIf the `onFailedAttempt` function throws, all retries will be aborted and the original promise will reject with the thrown error.\n\n### pRetry.AbortError(message)\n### pRetry.AbortError(error)\n\nAbort retrying and reject the promise.\n\n### message\n\nType: `string`\n\nError message.\n\n### error\n\nType: `Error`\n\nCustom error.\n\n## Tip\n\nYou can pass arguments to the function being retried by wrapping it in an inline arrow function:\n\n```js\nconst pRetry = require('p-retry');\n\nconst run = async emoji => {\n\t// â€¦\n};\n\n(async () => {\n\t// Without arguments\n\tawait pRetry(run, {retries: 5});\n\n\t// With arguments\n\tawait pRetry(() => run('ðŸ¦„'), {retries: 5});\n})();\n```\n\n## Related\n\n- [p-timeout](https://github.com/sindresorhus/p-timeout) - Timeout a promise after a specified amount of time\n- [Moreâ€¦](https://github.com/sindresorhus/promise-fun)\n",
  "readmeFilename": "readme.md",
  "gitHead": "dd984170eb777a8dffe41946fed2e87cd732763f",
  "bugs": {
    "url": "https://github.com/sindresorhus/p-retry/issues"
  },
  "homepage": "https://github.com/sindresorhus/p-retry#readme",
  "_id": "p-retry@4.6.2",
  "_nodeVersion": "14.19.1",
  "_npmVersion": "8.3.2",
  "dist": {
    "integrity": "sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==",
    "shasum": "9baae7184057edd4e17231cee04264106e092a16",
    "tarball": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
    "fileCount": 5,
    "unpackedSize": 11032,
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEYCIQC3RWNHGsA4QmpxagOAuZ3oH/nxO9yUWAbAaX6fQn9yewIhAK4QeRhQaI3IItWEKz/R93IZRkvg4p5qYeSxmjkoGuJd"
      }
    ],
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiaNN/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrpRg/9HaWuGXqkmNVmQ8uGRS+FEituo5ckXYS2UqdD52c0WrBQCu6I\r\nbd2O90+cAPMRPFZ4IBuLLXO7pEp7ZUMrUy1jwMpA+aTi5E0frWjoK85PB+A2\r\nUrJVPy0gMYOoPykXaP08SLjOcwf7kDOgedta4rZILV9m4dBDPAxJoT9VH/ze\r\neszzXlbRMt1aChDxRrnSkG1vSg6fKkJRRWoDlJuuA6lxoiI/TDTdLAJCwlfy\r\nHJfzECLWSHTrZ1hbSght4L47fC1VidxkBntg8+1I5OqI8O0zeFlcp5ps2lJ/\r\nwcd+lABF56M3vJ/F0xoiL5nDbHdElGsu+HO26SBhOKgh9DgiyECMCObmOCvj\r\nRndK2ZxDI50hbw2FrK16742O1/UzmINAeMZkzewmD8x66DtSaD46y8bvdzC+\r\nvhRzWou4Whgwmy+GJ250GEakxYlhvKDR5H4emtJR6qiYq0ZBtQ0/RwMpikau\r\nmdyjYRktuHdmibV5vEFWJZlJwT+lDKO5aW/LDiiCEWsHznDBL71dKorUitx4\r\nAvzvWrRFeToUFmRuCOLCrDCAkd3VsAzLyO0Hwz3Fd7pKITP31TLyT6X4zl1c\r\nKm0OBnSL1rfN8pk660CcbIj4k8E1tYTUyFscH2l9LefGLrtE0B5eHpQi9eZp\r\ntvdu79GcBaKscB+S6eNfOmF5xZxKIMbVEFw=\r\n=g67e\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "directories": {},
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/p-retry_4.6.2_1651037055673_0.3673650530684487"
  },
  "_hasShrinkwrap": false,
  "_shasum": "9baae7184057edd4e17231cee04264106e092a16",
  "_resolved": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
  "_from": "p-retry@>=4.5.0 <5.0.0"
}
